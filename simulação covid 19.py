# -*- coding: utf-8 -*-
"""Relatório5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14My3dy3eA4Y5qHqwNzlv2W46LrU-LwkX
"""



"""# Relatório Simulação 5 - SIR
# Henrique Campanha Garcia, RA: 150970
# Guilherme Silva do Nascimento, RA: 156554
# Victor Hugo Teodoro Pimentel, RA: 150976

# Descrição do sistema simulado
 Neste projeto, buscamos implementar o modelo SIR e realizar simulações envolvendo o COVID-19, por meio de um sistema computacional. Utilizando as seguintes fórmulas:

 $
\frac{dS}{dt} = -rSI
$

 $
\frac{dI}{dt} = rSI -aI
$

 $
\frac{dR}{dt} = aI
$

# Parâmetros de simulação:
 Para os testes simulados, foram utilizados  a  como taxa de recuperação,  r  como taxa de infecção,  N como população, S como suscetíveis, I para infectados e R para recuperados.

# Bibliotecas utilizadas:
"""

#Bibliotecas
import numpy as np
from matplotlib import pyplot as plt

"""# Simulações
Durante as simulações, será observado o desenvolvimento da COVID-19 com base na mudança dos parâmetros, sendo observado o ápice da doença e se houve o achatamento da curva de contágio.

# Simulação 1

# Parâmetros:
"""

DT = 0.01 # Variação do tempo
S0 = 2000 # População sucetível inicial
I0 = 1000 # População infectada inicial
r = 1.1 # Taxa de infecção
a = 0.80 # Taxa de recuperação
TMax = 5000 # Tempo máximo de simulação

# Variáveis
S = S0 
I = I0 
R = 0 

# Listas para plot
Sl = [S] # População suscetível
Il = [I] # População infectada
Rl = [R] # População recuperada
Nl = [S+I+R] #População total
Tl = np.arange(0,TMax,DT) # tempo

"""# Desenvolvimento da simulação"""

for i in np.arange(DT,TMax,DT):
    DS = (-r*S*I)*DT
    DI = (I*(r*S - a))*DT
    DR = (a*I)*DT

    S = S + DS 
    I = I + DI 
    R = R + DR 

    Sl.append(S)
    Il.append(I)
    Rl.append(R)
    Nl.append(S+I+R)
    if S < 0:
        S = 0
    if I < 0:
        I = 0

"""# Gráfico de evolução da doença"""

# Gráfico 01 - População
plt.plot(Tl,Sl, label="suscetíveis")
plt.plot(Tl,Il, label="infectados")
plt.plot(Tl,Rl, label="recuperados")
plt.plot(Tl,Nl, label="total")
plt.legend(loc='upper right')
plt.show()

"""# Simulação 2
Parâmetros:
"""

DT = 0.01 # Variação do tempo
S0 = 2000 # População sucetível inicial
I0 = 1000 # População infectada inicial
r = 1.1 # Taxa de infecção
a = 0.80 # Taxa de recuperação
TMax = 5000 # Tempo máximo de simulação

# Variáveis
S = S0 
I = I0 
R = 0 

# Listas para plot
Sl = [S] # População suscetível
Il = [I] # População infectada
Rl = [R] # População recuperada
Nl = [S+I+R] #População total
Tl = np.arange(0,TMax,DT) # tempo

"""# Desenvolvimento da simulação"""

for i in np.arange(DT,TMax,DT):
    DS = (-r*S*I)*DT
    DI = (I*(r*S - a))*DT
    DR = (a*I)*DT

    S = S + DS 
    I = I + DI 
    R = R + DR 

    Sl.append(S)
    Il.append(I)
    Rl.append(R)
    Nl.append(S+I+R)
    if S < 0:
        S = 0
    if I < 0:
        I = 0

"""# Gráfico de evolução da doença"""

# Gráfico 01 - População
plt.plot(Tl,Sl, label="suscetíveis")
plt.plot(Tl,Il, label="infectados")
plt.plot(Tl,Rl, label="recuperados")
plt.plot(Tl,Nl, label="total")
plt.legend(loc='upper right')
plt.show()

"""# Conclusão
Tendo em vista os resultados obtidos através dos experimentos realizados pela ferramenta computacional, e da análise feita relacionando estes resultados obtidos por meio das simulações com a teoria exposta nos slides, conclui-se que estes estão se alinhando assim como o esperado com os resultados encontrados, e demonstrando estar de acordo com a realidade, tendo um pico do número de infectados e consequentemente o achatamento da curva de infecção.
"""