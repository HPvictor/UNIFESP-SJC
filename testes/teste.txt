/* programa teste */

int vet[ 3 ];

int input(void)
{
}

void output(int x)
{
}

int minloc ( int a[], int low, int high )
{	int i; int x; int k;
	k = low;
	x = a[low];
	i = low + 1;
	while (i < high){
		if (a[i] < x){
			x = a[i];
			k = i;
		}
		i = i + 1;
	}
	return k;
}

int maxloc ( int a[], int low, int high )
{	int i; int x; int k;
	k = low;
	x = a[low];
	i = low + 1;
	while (i < high){
		if (a[i] > x){
			x = a[i];
			k = i;
		}
		i = i + 1;
	}
	return k;
}

void sort ( int a[], int low, int high )
{	int i; int k;
	i = low;
	while (i < high-1){
		int t;
		k = minloc(a,i,high);
		t = a[k];
		a[k] = a[i];
		a[i] = t;
		i = i + 1;
	}
    i = 0;
	while (i < 3){
		output(vet[i]);
		i = i + 1;
	}
}

void sortd ( int a[], int low, int high )
{	int i; int k;
	i = low;
	while (i < high-1){
		int t;
		k = maxloc(a,i,high);
		t = a[k];
		a[k] = a[i];
		a[i] = t;
		i = i + 1;
	}
    i = 0;
	while (i < 3){
		output(vet[i]);
		i = i + 1;
	}
}

void min (int a[]) {
    int i;
    i = minloc(a,0,3);
    output(a[i]);
}

void max (int a[]) {
    int i;
    i = maxloc(a,0,3);
    output(a[i]);
}

void first ( int a[] ) {
    output(a[0]);
}

void second ( int a[] ) {
    output(a[1]);
}

void third ( int a[] ) {
    output(a[2]);
}

void mean ( int a[] ) {
    int m;
    m = (a[0] + a[1] + a[2]) / 3;
    output(m);
}

void sum ( int a[] ) {
    int s;
    s = (a[0] + a[1] + a[2]);
    output(s);
}

void mult ( int a[] ) {
    int m;
    m = (a[0] * a[1] * a[2]);
    output(m);
}

void main(void)
{
	int i;
    int aux;
	i = 0;
	while (i < 3){
		vet[i] = input();
		i = i + 1;
	}
    aux = input();
    if (aux == 0) {
	    sort(vet,0,3);
    }
    else if (aux == 1) {
        sortd(vet,0,3);
    }
    else if (aux == 2) {
        min(vet);
    }
    else if (aux == 3) {
        max(vet);
    }
    else if (aux == 4) {
        first(vet);
    }
    else if (aux == 5) {
        second(vet);
    }
    else if (aux == 6) {
        third(vet);
    }
    else if (aux == 7) {
        mean(vet);
    }
    else if (aux == 8) {
        sum(vet);
    }
    else if (aux == 9) {
        mult(vet);
    }
    else {
        output(0-1);
    }
}